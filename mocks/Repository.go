// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "todo-code-gen/internal/todo/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: _a0, _a1
func (_m *Repository) CreateTodo(_a0 context.Context, _a1 entity.CreateTodoParams) (int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateTodoParams) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.CreateTodoParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTodoById provides a mock function with given fields: _a0, _a1
func (_m *Repository) DeleteTodoById(_a0 context.Context, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTodoById provides a mock function with given fields: _a0, _a1
func (_m *Repository) GetTodoById(_a0 context.Context, _a1 int64) (entity.Todo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.Todo
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.Todo); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.Todo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTodos provides a mock function with given fields: _a0, _a1
func (_m *Repository) ListTodos(_a0 context.Context, _a1 entity.ListTodosParams) ([]entity.ListTodosRow, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []entity.ListTodosRow
	if rf, ok := ret.Get(0).(func(context.Context, entity.ListTodosParams) []entity.ListTodosRow); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ListTodosRow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.ListTodosParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTodo provides a mock function with given fields: _a0, _a1
func (_m *Repository) UpdateTodo(_a0 context.Context, _a1 entity.UpdateTodoParams) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UpdateTodoParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

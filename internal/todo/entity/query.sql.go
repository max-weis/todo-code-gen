// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package entity

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :execresult
INSERT INTO todos (title, description, status)
VALUES (?, ?, ?)
`

type CreateTodoParams struct {
	Title       string
	Description sql.NullString
	Status      int32
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTodo, arg.Title, arg.Description, arg.Status)
}

const deleteTodoById = `-- name: DeleteTodoById :exec
DELETE
FROM todos
WHERE id = ?
`

func (q *Queries) DeleteTodoById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodoById, id)
	return err
}

const getTodoById = `-- name: GetTodoById :one
SELECT t.id, t.title, t.description, t.status
FROM todos AS t
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTodoById(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoById, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
	)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT t.id, t.title
FROM todos AS t LIMIT ?
OFFSET ?
`

type ListTodosParams struct {
	Limit  int32
	Offset int32
}

type ListTodosRow struct {
	ID    int64
	Title string
}

func (q *Queries) ListTodos(ctx context.Context, arg ListTodosParams) ([]ListTodosRow, error) {
	rows, err := q.db.QueryContext(ctx, listTodos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTodosRow
	for rows.Next() {
		var i ListTodosRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE todos
SET title=?,
    description=?,
    status=?
WHERE id = ? LIMIT 1
`

type UpdateTodoParams struct {
	Title       string
	Description sql.NullString
	Status      int32
	ID          int64
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.ExecContext(ctx, updateTodo,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.ID,
	)
	return err
}

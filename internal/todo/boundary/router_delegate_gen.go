// Package Spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package boundary

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error Response
type ErrorResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// A base todo used for creation and modification.
type TodoBase struct {
	Description *string `json:"description,omitempty"`
	Done        bool    `json:"done"`
	Title       string  `json:"title"`
}

// TodoFull defines model for todo-full.
type TodoFull struct {
	// Embedded struct due to allOf(#/components/schemas/todo-base)
	TodoBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id int `json:"id"`
}

// A reduced todo with identifier used as response object for the todo list.
type TodoList struct {
	Done  bool   `json:"done"`
	Id    int    `json:"id"`
	Title string `json:"title"`
}

// GetTodosParams defines parameters for GetTodos.
type GetTodosParams struct {
	// Filters all or unfinished todos in the response
	State *GetTodosParamsState `json:"state,omitempty"`

	// Maximal number of todos in the response
	Limit *int `json:"limit,omitempty"`

	// Offset for the todos in the response
	Offset *int `json:"offset,omitempty"`
}

// GetTodosParamsState defines parameters for GetTodos.
type GetTodosParamsState string

// CreateTodoJSONBody defines parameters for CreateTodo.
type CreateTodoJSONBody TodoBase

// UpdateTodoJSONBody defines parameters for UpdateTodo.
type UpdateTodoJSONBody TodoBase

// CreateTodoJSONRequestBody defines body for CreateTodo for application/json ContentType.
type CreateTodoJSONRequestBody CreateTodoJSONBody

// UpdateTodoJSONRequestBody defines body for UpdateTodo for application/json ContentType.
type UpdateTodoJSONRequestBody UpdateTodoJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List todos
	// (GET /todos)
	GetTodos(ctx echo.Context, params GetTodosParams) error
	// Create Todo
	// (POST /todos)
	CreateTodo(ctx echo.Context) error
	// Delete Todo
	// (DELETE /todos/{todo-id})
	DeleteTodo(ctx echo.Context, todoId int) error
	// Get Todo
	// (GET /todos/{todo-id})
	GetTodo(ctx echo.Context, todoId int) error
	// Update Todo
	// (PUT /todos/{todo-id})
	UpdateTodo(ctx echo.Context, todoId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTodos converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodos(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTodosParams
	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTodos(ctx, params)
	return err
}

// CreateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTodo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTodo(ctx)
	return err
}

// DeleteTodo converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "todo-id" -------------
	var todoId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "todo-id", runtime.ParamLocationPath, ctx.Param("todo-id"), &todoId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todo-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTodo(ctx, todoId)
	return err
}

// GetTodo converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "todo-id" -------------
	var todoId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "todo-id", runtime.ParamLocationPath, ctx.Param("todo-id"), &todoId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todo-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTodo(ctx, todoId)
	return err
}

// UpdateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "todo-id" -------------
	var todoId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "todo-id", runtime.ParamLocationPath, ctx.Param("todo-id"), &todoId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todo-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTodo(ctx, todoId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/todos", wrapper.GetTodos)
	router.POST(baseURL+"/todos", wrapper.CreateTodo)
	router.DELETE(baseURL+"/todos/:todo-id", wrapper.DeleteTodo)
	router.GET(baseURL+"/todos/:todo-id", wrapper.GetTodo)
	router.PUT(baseURL+"/todos/:todo-id", wrapper.UpdateTodo)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+dPK2/KfAAAA//86guutrBcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

